#compdef _ue4 ue4
# https://blog.mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html

function _ue4 {
    local -a subcommands=(
    "help\\:'Show help'" # arg
    # Configuration-related commands
    "setroot\\:'Set an engine root path override that supercedes auto-detect'" # arg
    "clearroot\\:'Remove any previously-specified engine root path override'"
    "clearcache\\:'Clear any cached data that ue4cli has stored'"
    # Engine-related commands
    "root\\:'Print the path to the root directory of the Unreal Engine'"
    "version\\:'Print the version string of the Unreal Engine (default: \"full\")'"
    "editor\\:'Run the editor without an Unreal project'" # arg
    "build-target\\:'Build the specified target using UBT'" # arg
    ## Descriptor-related commands
    "run\\:'Run the editor for the Unreal project'" # arg
    "gen\\:'Generate IDE project files for the Unreal project'"
    "build\\:'Build the Editor modules for the Unreal project or plugin'" # arg
    "clean\\:'Clean build artifacts for the Unreal project or plugin'"
    "test\\:'Run automation tests for the Unreal project'"
    "package\\:'Package a build of the Unreal project or plugin in the current directory'"

    # Library-related commands
    # ------------------------
    # 
    "libs\\:'List the supported third-party libs'"
    "cxxflags\\:'Print compiler flags for building against libs'" # args
    "ldflags\\:'Print linker flags for building against libs'" # args
    "cmakeflags\\:'Print CMake flags for building against libs'" # args
    "includedirs\\:'Print include directories for building against libs'" # args
    "libfiles\\:'Print library files for building against libs'" # args
    "defines\\:'Print preprocessor definitions for building against libs'" # args

    # 
    # Automation-related commands
    # ---------------------------
    "uat\\:'Invoke RunUAT with the specified arguments'" # args
    )

    local line
    _arguments -C \
        "--help[Show help]" \
        "1: :(($subcommands))" \
        "*::arg:->args"

    case $line[1] in
        setroot)
            _ue4_setroot
        ;;
        build)
            _ue4_build
        ;;
        run)
            _ue4_run
        ;;
        gen)
            _ue4_gen
        ;;
        version)
            _ue4_version
        ;;
    esac
}

function _ue4_setroot {
    _arguments \
        "1: :_files"
}

function _ue4_version {
    _arguments \
        "1: :(major minor patch full short)"
}

function _ue4_run {
    _arguments \
        "--debug[]" \
        "*::arg:->args"
}

function _ue4_gen {
    local line

    # NOTE:
    # '-M' is an option to fucking `arguments_`. Don't swap "-CMakefile" with
    # "-Makefile" below; otherwise "-M" will be interpreted as an option to
    # `arguments_` and you'll get:
    #
    # _describe:compadd:114: unknown match specification character `a'
    #
    # It took me way too much to figure this out.
    #
    _arguments -C \
        "-CMakefile[Generate project files for CMake]" \
        "-Makefile[Generate Linux Makefile]" \
        "-QMakefile[Generate project files for QMake]" \
        "-KDevelopfile[Generate project files for KDevelop]" \
        "-CodeliteFiles[Generate project files for Codelite]" \
        "-XCodeProjectFiles[Generate project files for XCode]" \
        "-EddieProjectFiles[Generate project files for Eddie]" \
        "-VSCode[Generate project files for Visual Studio Code]" \
        "-VSMac[Generate project files for Visual Studio Mac]" \
        "-CLion[Generate project files for CLion]" \
        "-Rider[Generate project files for Rider]" \
        "*::arg:->args"

    # The above arguments may be passed several times:
    [ "$line[1]" != "" ] && _ue4_gen
}

function _ue4_build {
}

# function _ue4_build {
#     _arguments -C \
#         "-Help[Show help]" \
#         "-Verbose[Increase output verbosity]" \
#         "-VeryVerbose[Increase output verbosity more]" \
#         "-Log[Specify a log file location (default: Engine/Programs/UnrealBuildTool/Log.txt)]" \
#         "-TraceWrites[Trace writes requested to the specified file]" \
#         "-Timestamps[Include timestamps in the log]" \
#         "-FromMsBuild[Format messages for msbuild]" \
#         "-SuppressSDKWarnings[Missing SDKs error verbosity level will be reduced from warning to log]" \
#         "-Progress[Write progress messages in a format that can be parsed by other programs]" \
#         "-NoMutex[Allow more than one instance of the program to run at once]" \
#         "-WaitMutex[Wait for another instance to finish and then start, rather than aborting immediately]" \
#         "-RemoteIni[Remote tool ini directory]" \
#         "*::args:->args"
#
#     # TODO:
#             #  -Mode=               :  Select tool mode. One of the following (default tool mode is "Build"):
#             #                            AggregateClangTimingInfo, AggregateParsedTimingInfo, Analyze, ApplePostBuildSync, Build, 
#             #                            ClRepro, Clean, Deploy, Execute, FixIncludePaths, GenerateClangDatabase, GenerateProjectFiles, 
#             #                            IOSPostBuildSync, IWYU, InlineGeneratedCpps, JsonExport, PVSGather, ParseMsvcTimingInfo, 
#             #                            PipInstall, PrintBuildGraphInfo, ProfileUnitySizes, Query, QueryTargets, Server, SetupPlatforms, 
#             #                            Test, UnrealHeaderTool, ValidatePlatforms, WriteDocumentation, WriteMetadata
# }


# Usage:
# ue4 COMMAND [ARGS]
# 
# Configuration-related commands
# ------------------------------
# 
# These commands control the configuration of ue4cli:
# 
# 	setroot <ROOTDIR> - Sets an engine root path override that supercedes auto-detect
# 	clearroot - Removes any previously-specified engine root path override
# 	clearcache - Clears any cached data that ue4cli has stored
# 
# 
# Engine-related commands
# -----------------------
# 
# These commands relate to the Unreal Engine itself:
# 
# 	root - Print the path to the root directory of the Unreal Engine
# 	version [major|minor|patch|full|short] - Print the version string of the Unreal Engine (default format is "full")
# 	editor [EXTRA ARGS] - Run the editor without an Unreal project (useful for creating new projects)
# 	build-target <TARGET> [CONFIGURATION] - Build the specified target using UBT
# 
# 
# Descriptor-related commands
# ---------------------------
# 
# These commands relate to an individual Unreal project or plugin, and will look
# for a .uproject or .uplugin file located in the current working directory
# (Note that some commands only support projects, not plugins):
# 
# 	run [--debug] [EXTRA ARGS] - Run the editor for the Unreal project
# 	gen [EXTRA ARGS] - Generate IDE project files for the Unreal project
# 	build [CONFIGURATION] [TARGET] - Build the Editor modules for the Unreal project or plugin
# 	clean - Clean build artifacts for the Unreal project or plugin
# 	test [--withrhi] [--list] [--all] [--filter FILTER] TEST1 TEST2 TESTN [-- EXTRA ARGS] - Run automation tests for the Unreal project
# 	package [PROJECT CONFIGURATION] [EXTRA UAT ARGS] - Package a build of the Unreal project or plugin in the current directory, storing the result in a subdirectory named "dist". Default configuration for projects is Shipping.
# 
# 
# Library-related commands
# ------------------------
# 
# These commands are for developers compiling modules that need to build against
# UE4-bundled third-party libs for purposes of interoperability with the engine:
# 
# 	libs - List the supported third-party libs
# 	cxxflags [--multiline] [--nodefaults] [LIBS] - Print compiler flags for building against libs
# 	ldflags [--multiline] [--flagsonly] [--nodefaults] [LIBS] - Print linker flags for building against libs
# 	cmakeflags [--multiline] [--nodefaults] [LIBS] - Print CMake flags for building against libs
# 	includedirs [--nodefaults] [LIBS] - Print include directories for building against libs
# 	libfiles [--nodefaults] [LIBS] - Print library files for building against libs
# 	defines [--nodefaults] [LIBS] - Print preprocessor definitions for building against libs
# 
# 
# Automation-related commands
# ---------------------------
# 
# These commands relate to Unreal's automation system:
# 
# 	uat [ARGS] - Invoke RunUAT with the specified arguments
# 
# 
# Commands defined by plugins
# ---------------------------
# 
# These commands are defined by currently installed ue4cli plugins:
# 
# 	(No commands in this group)
# 

# vim: set ft=zsh:
