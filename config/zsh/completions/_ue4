#compdef _ue4 ue4

#
# Completion for ue4 (https://docs.adamrehn.com/ue4cli/overview/introduction-to-ue4cli)
# ------------------ 
#
# Author: Paolo Di Giglio (GitHub: pdigiglio)
#         https://github.com/pdigiglio/.dotfiles/blob/master/config/zsh/completions/_ue4
#
# Version: 0.1.1
#
# Changelog:
#   v0.1.1 - Add completion for "uat" subcommand
#   v0.1.0 - Initial release
#
# Starting point to write completion files:
#  * https://blog.mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html
#

# FAQ:
#  * Why do I need a '$' when setting IFS (input field separator)?
#    > https://stackoverflow.com/a/4128305
#    

# Get the possible UE configurations (with desctiptions).
# function get_ue_configurations() {
#     typeset -r ifs="\n"
#     typeset -r debug="Debug\\:'Build engine and game in debug'"
#     typeset -r debug_game="DebugGame\\:'Build game in debug'"
#     typeset -r development="Development\\:'Enable almost all engine and game optimizations'"
#     typeset -r shipping="Shipping\\:'Optimal performance. Strip console cmds, stats, profiling tools'"
#     typeset -r test="Test\\:'Same as Shipping. Keep some console cmds, stats, and profiling tools'"
#     echo "$debug$ifs$debug_game$ifs$development$ifs$shipping$ifs$test$ifs"
# }

# Check if an elemnt is in an array
# @param $1    The element to look for
# @param $n... The array elements.
function elem_in_array {
    local -r needle="$1"
    shift # Consume first arg

    while (( $# != 0 ))
    do
        local elem="$1"
        [[ "$needle" == "$elem" ]] && return 0 # needle found
        shift
    done

    # Nothing found
    return 1
}

function _ue4 {
    local -a subcommands=(
        "help\\:'Show help'"
        # Configuration-related commands
        "setroot\\:'Set an engine root path override that supercedes auto-detect'" # arg
        "clearroot\\:'Remove any previously-specified engine root path override'"
        "clearcache\\:'Clear any cached data that ue4cli has stored'"
        # Engine-related commands
        "build-target\\:'Build the specified target using UBT'" # arg
        "editor\\:'Run the editor without an Unreal project'" # arg
        "root\\:'Print the path to the root directory of the Unreal Engine'"
        "version\\:'Print the version of the Unreal Engine (default: \"full\")'"
        # Descriptor-related commands
        "build\\:'Build the Editor modules for the Unreal project or plugin'"
        "clean\\:'Clean build artifacts for the Unreal project or plugin'"
        "gen\\:'Generate IDE project files for the Unreal project'"
        "package\\:'Package a build of the Unreal project or plugin in the current directory'" # arg
        "run\\:'Run the editor for the Unreal project'" # arg
        "test\\:'Run automation tests for the Unreal project'"
        # Library-related commands
        "cmakeflags\\:'Print CMake flags for building against libs'"
        "cxxflags\\:'Print compiler flags for building against libs'"
        "ldflags\\:'Print linker flags for building against libs'"
        "includedirs\\:'Print include directories for building against libs'"
        "libfiles\\:'Print library files for building against libs'"
        "defines\\:'Print preprocessor definitions for building against libs'"
        "libs\\:'List the supported third-party libs'"
        # Automation-related commands
        "uat\\:'Invoke RunUAT with the specified arguments'" # args
    )

    local line
    _arguments -C \
        "--help[Show help]" \
        "1: :(($subcommands))" \
        "*::arg:->args"

    case $line[1] in
        setroot)
            _ue4_setroot
        ;;
        build)
            _ue4_build
        ;;
        package)
            _ue4_package
        ;;
        run)
            _ue4_run
        ;;
        test)
            _ue4_test
        ;;
        gen)
            _ue4_gen
        ;;
        cmakeflags)
            _ue4_cmakeflags
        ;;
        cxxflags)
            _ue4_cxxflags 
        ;;
        defines)
            _ue4_defines 
        ;;
        includedirs)
            _ue4_includedirs 
        ;;
        ldflags)
            _ue4_ldflags 
        ;;
        libfiles)
            _ue4_libfiles 
        ;;
        version)
            _ue4_version
        ;;
        uat)
            _ue4_uat
        ;;
    esac
}

# TODO: gen/build commands expect you to be in a project/plugin folder. Use
# this function to check it before completing.
# function cwd_contains_project_or_plugin {
#     local proj_or_plug=(*.{uproject,uplugin}(N))
#
#     # Set the exit code to the exit code of checking is the string is not
#     # empty.
#     [ -n "$proj_or_plug" ]
# }

function _ue4_setroot {
    _arguments \
        "1: :_files"
}

function _ue4_version {
    _arguments \
        "1: :(major minor patch full short)"
}

function _ue4_run {
    _arguments \
        "--debug[]" \
        "*::arg:->args"
}

function _ue4_gen {
    local line

    # NOTE:
    # '-M' is an option to fucking `arguments_`. Don't swap "-CMakefile" with
    # "-Makefile" below; otherwise "-M" will be interpreted as an option to
    # `arguments_` and you'll get:
    #
    # _describe:compadd:114: unknown match specification character `a'
    #
    # It took me way too much to figure this out.
    #
    _arguments -C \
        "-CMakefile[Generate project files for CMake]" \
        "-Makefile[Generate Linux Makefile]" \
        "-QMakefile[Generate project files for QMake]" \
        "-KDevelopfile[Generate project files for KDevelop]" \
        "-CodeliteFiles[Generate project files for Codelite]" \
        "-XCodeProjectFiles[Generate project files for XCode]" \
        "-EddieProjectFiles[Generate project files for Eddie]" \
        "-VSCode[Generate project files for Visual Studio Code]" \
        "-VSMac[Generate project files for Visual Studio Mac]" \
        "-CLion[Generate project files for CLion]" \
        "-Rider[Generate project files for Rider]" \
        "*::arg:->args"

    # The above arguments may be passed several times:
    [ "$line[1]" != "" ] && _ue4_gen
}

function _ue4_build {
    local -a configurations=(
        "Debug\\:'Build engine and game in debug'"
        "DebugGame\\:'Build game in debug'"
        "Development\\:'Enable almost all engine and game optimizations'"
        "Shipping\\:'Optimal performance. Strip console cmds, stats, profiling tools'"
        "Test\\:'Same as Shipping. Keep some console cmds, stats, and profiling tools'"
    )

    local -a targets=(
        "Game\\:'Build stand-alone executable. Requires platform-specific cooked content'"
        "Editor\\:'Build project to be opened in Unreal Editor'"
        "Client\\:'Build a client in the client-server model for multiplayer games'"
        "Server\\:'Build a Server in the client-server model for multiplayer games'"
    )

    _arguments \
        "1: :(($configurations))" \
        "2: :(($targets))" \
        "*::arg:->args"
}

function _ue4_package_plugin {
    # XXX: - file completion doesn't work.
    #      - only allow completing folers in -Package
    local line
    _arguments -C \
        "-Plugin[The plugin file]: :_files" \
        "-Package[The folder to store the built plugin]: :_files" \
        "*::arg:->args"

    [ -n "$line[1]" ] && _ue4_package_plugin
}

function _ue4_package_project {
    local line
    _arguments -C \
        "-Project[The project file]: :_files" \
        "-ArchiveDirectory[The folder to store the built project]: :_files" \
        "*::arg:->args"

    [ -n "$line[1]" ] && _ue4_package_project
}

function _ue4_package {
    local -ar configurations=(Debug DebugGame Development Shipping Test)

    local line
    _arguments -C \
        "1: :(($configurations))" \
        "*::arg:->args"

    if elem_in_array "$line[1]" "${configurations[@]}" 
    then
        _ue4_package_project 
    else
        _ue4_package_plugin
    fi
}

function _ue4_test {
    local -a filters=(
        "Engine\\:''"
        "Smoke\\:''"
        "Stress\\:''"
        "Perf\\:''"
        "Product\\:'Tests specific to your project and its plugins'"
    )

    _arguments \
        "--list[Print the list of available tests]" \
        "--all[Run all of the available tests (including engine-wide tests)]" \
        "--filter[Run tests match the specified filter]: :(($filters))" \
        "--withrhi[Run tests with rendering enabled]" \
}

function _ue4_cmakeflags {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--multiline[Print each flag on a separate line]" \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_cxxflags {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--multiline[Print each flag on a separate line]" \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_defines {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_includedirs {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_ldflags {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--multiline[Print each flag on a separate line]" \
        "--flagsonly[Print the linker flags only (omit library names)]" \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_libfiles {
    # TODO:
    #  1. The options should come before the libs.
    #  2. Cache the libs.
    #  3. Avoid copy-paste.

    local -a libs=($(ue4 libs 2> /dev/null))
    _arguments \
        "--nodefaults[Omit details for building against libc++ (Linux only)]" \
        "1: :(($libs))"
}

function _ue4_uat {

    local line
    _arguments -C \
        "-Verbose[Enable verbose logging]" \
        "-VeryVerbose[Enable very verbose logging]" \
        "-Submit[Allow UAT command to submit changes]" \
        "-NoSubmit[Prevent any submit attempts]" \
        "-NoP4[Disable Perforce functionality (default if not run on build machine)]" \
        "-P4[Enable Perforce functionality (default if run on build machine)]" \
        "-Help[Display help]" \
        "-List[List all available commands]" \
        "-NoKill[Do not kill any spawned processes on exit]" \
        "-Compile[Force all script modules to be compiled]" \
        "-NoCompile[Do not compile script modules: run with what is up to date]" \
        "-IgnoreBuildRecords[Ignore build records to determine up-to-date script modules]" \
        "-UseLocalBuildStorage[Use local storage for your root build storage (for local testing)]" \
        "-WaitForDebugger[Wait for debugger to attach; breaks once attached]" \
        "-WaitForStdStreams[Time (ms) to wait for std streams in child processes to close]" \
        "*::arg:->args"

    # The above arguments may be passed several times:
    [ "$line[1]" != "" ] && _ue4_uat
}

# NOTE: There's no zsh parser for treesitter yet.
# vim: set filetype=zsh foldmethod=indent:
